class Solution {
public:
    bool compute(string &t1, string &t2){
        int h1 = (t1[0] - '0')*10 + (t1[1] - '0');
        int h2 = (t2[0] - '0')*10 + (t2[1] - '0');
        int m1 = (t1[2] - '0')*10 + (t1[3] - '0');
        int m2 = (t2[2] - '0')*10 + (t2[3] - '0');
        if(h1==h2){
            return true;
        }else if(h2-h1==1){
            if(m1-m2>0){
                return true;
            }
        }
        return false;
    }
    vector<string> findHighAccessEmployees(vector<vector<string>>& access_times) {
        vector<string>ans;
        unordered_map<string,vector<string>>freq;
        int n=access_times.size();
        sort(access_times.begin(),access_times.end());
        for(auto access_time: access_times){
            freq[access_time[0]].push_back(access_time[1]);
        }
        for(auto &itr: freq){
            if(itr.second.size()>=3){
                for(int i=0;i<itr.second.size()-2;i++){
                    if(compute(itr.second[i],itr.second[i+2])){
                        ans.push_back(itr.first);
                        break;
                    }
                }
            }
        }
        return ans;
    }
};
