/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 #define pr pair<pair<bool,pair<int,int>>,int>
int ans;
class Solution {
    pr solve(TreeNode* root){
        if(root == NULL){
            return {{true,{INT_MIN,INT_MAX}},0};
        }
        pr leftT = solve(root -> left);
        pr rightT = solve(root -> right);
        int maxSumLeft = leftT.second;
        int maxSumRight = rightT.second;
        bool isLeftBST = leftT.first.first;
        bool isRightBST = rightT.first.first;
        int leftTreeMax = leftT.first.second.first;
        int leftTreeMin = leftT.first.second.second;
        int rightTreeMin = rightT.first.second.second;
        int rightTreeMax = rightT.first.second.first;
        int treeMax = max(root->val,rightTreeMax);
        int treeMin = min(root->val,leftTreeMin);
        if(isLeftBST && isRightBST && root -> val < rightTreeMin && root -> val > leftTreeMax){
            int sum = root->val+maxSumLeft+maxSumRight;
            ans = max({ans,maxSumLeft,maxSumRight,sum});
            return {{true,{treeMax,treeMin}},sum};
        }
        int sum = max(maxSumLeft,maxSumRight);
        ans = max(ans,sum);
        return {{false,{treeMax,treeMin}},sum};
    }
public:
    int maxSumBST(TreeNode* root) {
        ans = 0;
        solve(root);
        return ans;
    }
};
